# Snakemake Snakefile for generating pseudo-poly-A-enriched samples from
#   BAM files derived from ribo-depleted samples. These files can be generated
#   using "Snakefile_twopass_v3".
#
# Requires: 
# 1) 'ribo_samples.txt': text file in the same directory as this Snakefile, 
#   with one sample identifier per line. These identifiers must match the 
#   identifiers used in Snakefile_twopass_v3 to generate the BAM files 
#   referred to in 'config.yaml' (below).
# 2) 'config.yaml': text file in the same directory as this Snakefile, with 
#   the following entries:
#     'gtf': reference annotation file, in .gtf format
#     'genome': reference genome, in FASTA format
#     'bam_prefix': directory for the BAM files generated by 
#        Snakefile_twopass_v3
# 3) a directory, 'scripts', in the same directory as this Snakefile, 
#   containing the following scripts:
#     'regions_from_genes.py'
#     'query_names_pt2.py'
#
# Outputs:
# 1)salmon (.sf) files suitable for differential expression analysis, labeled
#   with the sample identifiers.

import csv

configfile: "config.yaml"

SAMPLES = []
with open('ribo_samples.txt') as csvfile:
	rdr = csv.reader(csvfile)
	for row in rdr:
		SAMPLES.append(row[0])

CHROMOSOMES = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 
	'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 
	'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 
	'chrM']

rule all:
	input:
		expand("out_salmon2/gathered/{sample}_pt2_quant.sf", sample = SAMPLES)

rule genes_to_regions:
	input:
		"{config[gtf]}"
	output:
		"pickles/{chrom}_pickle"
	shell:
		"python scripts/regions_from_genes.py {input} {wildcards.chrom}"

rule downsample:
	input:
		genes = "pickles/{chrom}_pickle",
		in_bam = "{config[bam_prefix]}{sample}Aligned.sortedByCoord.out.bam"
	output:
		"pt2_fastqs/temp_bams/{sample}_{chrom}_pt2.bam"
	shell:
		"python scripts/query_names_pt2.py {input.in_bam} {input.genes} {wildcards.chrom} {output}"

rule temp_fastq:
	input:
		"pt2_fastqs/temp_bams/{sample}_{chrom}_pt2.bam"
	output:
		fq1 = "pt2_fastqs/temp_fastqs/{sample}_{chrom}_pt2_1.fastq",		
		fq2 = "pt2_fastqs/temp_fastqs/{sample}_{chrom}_pt2_2.fastq"
	shell:
		"bedtools bamtofastq -i {input} -fq {output.fq1} -fq2 {output.fq2}"

rule concatenate_fastqs:
	input:	
		expand("pt2_fastqs/temp_fastqs/{sample}_{chrom}_pt2_1.fastq", chrom = CHROMOSOMES, sample = SAMPLES),
		expand("pt2_fastqs/temp_fastqs/{sample}_{chrom}_pt2_2.fastq", chrom = CHROMOSOMES, sample = SAMPLES)
	output:
		fq1t = "pt2_fastqs/{sample}_pt2_1.fastq",
		fq2t = "pt2_fastqs/{sample}_pt2_2.fastq"
	shell:
		"cat pt2_fastqs/temp_fastqs/{wildcards.sample}_*_pt2_1.fastq > {output.fq1t}; cat pt2_fastqs/temp_fastqs/{wildcards.sample}_*_pt2_2.fastq > {output.fq2t}"
        
rule index:
	input:
		"{config[genome]}"
	output:
		directory("salidx")
	shell:
		"salmon index -t {input} -i {output}"

rule zip:
	input:
		fq1t = "pt2_fastqs/{sample}_pt2_1.fastq",
		fq2t = "pt2_fastqs/{sample}_pt2_2.fastq"
	output:	
		"pt2_fastqs/{sample}_pt2_1.fastq.gz",
		"pt2_fastqs/{sample}_pt2_2.fastq.gz"
	shell:
		"gzip {input.fq1t}; gzip {input.fq2t}"

rule salmon:
	input:
		fq1 = "pt2_fastqs/{sample}_pt2_1.fastq.gz",
		fq2 = "pt2_fastqs/{sample}_pt2_2.fastq.gz",
		index = directory("salidx")
	output:
		"out_salmon2/{sample}_pt2/quant.sf"
	threads:
		8
	params:
		"out_salmon2/{sample}_pt2"
	log:
		"{sample}_pt2.log"
	shell:
		"salmon quant -i {input.index} -l A -1 {input.fq1} -2 {input.fq2} -p {threads} --validateMappings -o {params} > {log}"

rule rename:
	input:
		"out_salmon2/{sample}_pt2/quant.sf"
	output:
		"out_salmon2/gathered/{sample}_pt2_quant.sf"
	shell:
		"mv {input} {output}"
